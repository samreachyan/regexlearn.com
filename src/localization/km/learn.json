{
  "examples.starter.title": "អនុវត្តន៍",
  "examples.starter.description": "ឥឡូវនេះដល់ពេលហើយដើម្បីធ្វើការអនុវត្តមេរៀនមួយចំនួន ដើម្បរំលឹកនូវអ្វីដែលយើងបានរៀន",

  "examples.finish.title": "ការអនុវត្តន៍បានជោគជ័យ",
  "examples.finish.description": " ",

  "steps.starter.title": "Intro",
  "steps.starter.description": "Regex គឺកន្សោមធម្មតាខ្លីៗ វាជួយក្នុងការផ្គូផ្គង ស្វែងរក ឬគ្រប់គ្រងអត្ថបទ។ ចាប់ផ្តើមដោយការវាយបញ្ចូល `OK` នៅក្នុងប្រអប់ ដើម្បីបន្តទៅជំហានដំបូង និងចូលទៅកាន់ការពិពណ៌នាលម្អិតបន្ថែមទៀត។",

  "steps.whatIsRegex.title": "អ្វីទៅជាអន្តរកម្មនៃ `Regex`?",
  "steps.whatIsRegex.description": "Regex គឺកន្សោមធម្មតាខ្លី ហើយជាតួរអក្សរដែលបង្ហាញពីគំរូស្វែងរក។ វាត្រូវបានហៅជា 'Regex' ឬ 'Regexp` ។ វាជួយក្នុងការផ្គូផ្គង ស្វែងរក ឬគ្រប់គ្រងអត្ថបទ។ ចាប់ផ្តើមដោយការវាយបញ្ចូល `យល់ព្រម` នៅក្នុងវាល Regex ដើម្បីបន្តទៅជំហានដំបូង និងចូលទៅកាន់ការពិពណ៌នាលម្អិតបន្ថែមទៀត។ Regex ត្រូវបានគេប្រើដើម្បីស្វែងរក ឬជំនួសពាក្យនៅក្នុងអត្ថបទ។ It is especially used to find or replace words in texts. In addition, we can test whether a text complies with the rules we set.\\n\\n For example, let's say you have a list of filenames. And you only want to find files with the `pdf` extension. Following typing an expression `^\\w+\\.pdf$` will work. The meaning of the definitions in this expression will become clearer as the steps progress.",

  "steps.basicMatchers.title": "មូលដ្ឋាននៃ Matchers",
  "steps.basicMatchers.description": "តួរអក្សរ ឬពាក្យដែលយើងចង់ស្វែងរកគឺអាចសរសេរដោយផ្ទាល់។ វាស្រដៀងនឹងដំណើរការស្វែងរកធម្មតា។ ឧទាហរណ៍ដើម្បីស្វែងរកពាក្យ `curious` ក្នុងអត្ថបទ អ្នកគ្រាន់តែសរសេរដូចគ្នា",

  "steps.dotCharacter.title": "សញ្ញាចុចមួយ `.` មានន័យថា រកតួរអក្សរណាមួយ",
  "steps.dotCharacter.description": "សញ្ញាចុចមួយ `.` អនុញ្ញាតឱ្យជ្រើសរើសតួរអក្សរណាមួយ​ រួមទាំងតួរអក្សរពិសេស និងចន្លោះ",

  "steps.characterSet.title": "សំណុំតួរអក្សរ `[abc]`",
  "steps.characterSet.description": "ប្រសិនបើតួរអក្សរមួយក្នុងពាក្យមួយអាចជាតួរអក្សរផ្សេងៗ​ យើងសរសេរវានៅក្នុងសញ្ញាខ្នៀប `[]` ជាមួយតួរអក្សរណាមួយដែលអ្នកចង់រក។ ឧទាហរណ៍ ដើម្បីស្វែងរកកន្សោមពាក្យមួយក្នុងអត្ថបទ សូមវាយតួរអក្សរ `a`, `e`, `i`, `o`, `u` នៅក្នុងសញ្ញាខ្នៀប `[]`",

  "steps.negatedCharacterSet.title": "សំណុំតួរអក្សរផ្ទុយ `[^abc]`",
  "steps.negatedCharacterSet.description": "ដើម្បីស្វែងរកពាក្យទាំងអស់នៅក្នុងអត្ថបទខាងក្រោម លើកលែងតែ `ber` និង `bor` ដោយគ្រាន់តែវាយ `e` និង `o` បន្តបន្ទាប់គ្នាពីសញ្ញា `^` នៅក្នុងសញ្ញាខ្នៀប `[]`.",

  "steps.range.title": "ចន្លោះតួរអក្សរ `[a-z]`",
  "steps.range.description": "ដើម្បីស្វែងរកអក្សរនៅក្នុងអត្ថបទដែលបានបញ្ជាក់ អក្សរចាប់ផ្តើម និងអក្សរបញ្ចប់ត្រូវបានសរសេរក្នុងខ្នៀប `[]` ជាមួយនឹងសញ្ញាចន្លោះពី​ ពាក្យមួយទៅពាក្យមួយ​ `-` វាគឺងាយស្រួល។ វាយកន្សោមពាក្យដែលនឹងជ្រើសរើសអក្សរតូចទាំងអស់ដែលចាប់ពី `e` ដល់ `o` ",

  "steps.rangeNumber.title": "ចន្លោះលេខ `[0-9]`",
  "steps.rangeNumber.description": "ដើម្បីស្វែងរកលេខនៅក្នុងជួរដែលបានបញ្ជាក់ លេខចាប់ផ្តើម និងលេខបញ្ចប់ត្រូវបានសរសេរក្នុងខ្នៀប `[]` ជាមួយសញ្ញាដក `-` នៃចន្លោះលេខ។ សរសេរកន្សោមដែលនឹងជ្រើសរើសលេខចន្លោះលេខ `3` ដល់ `6`",

  "examples.basicMatchers.title": "អនុវត្តន៍៖ មូលដ្ឋាននៃ Matcher",
  "examples.basicMatchers.description": "សរសេរកន្សោមដែលនឹងជ្រើសរើសពាក្យ `of` ក្នុងអត្ថបទ",

  "examples.dotCharacter.title": "អនុវត្តន៍៖ តួរអក្សរណាមួយ",
  "examples.dotCharacter.description": "វាយបញ្ចូលកន្សោមដើម្បីជ្រើសរើសអក្សរនីមួយៗ លេខ ដកឃ្លា និងតួរអក្សរពិសេសនៅក្នុងអត្ថបទ។ កន្សោមដែលអ្នកវាយត្រូវតែផ្គូផ្គងតួរអក្សរណាមួយ។",

  "examples.characterSet.title": "អនុវត្តន៍៖​ សំណុំតួរអក្សរ",
  "examples.characterSet.description": "សរសេរឃ្លាដែលត្រូវនឹងពាក្យនីមួយៗក្នុងអត្ថបទ។ តួរអក្សរតែមួយគត់ដែលផ្លាស់ប្តូរគឺជាអក្សរកាត់នៃពាក្យ។",

  "examples.negatedCharacterSet.title": "អនុវត្តន៍៖​ សំណុំតួរអក្សរផ្ទុយ",
  "examples.negatedCharacterSet.description": "សរសេរកន្សោមដែលនឹងផ្គូផ្គងអ្វីផ្សេងក្រៅពីពាក្យ 'beor' និង 'beur' នៅក្នុងអត្ថបទ។ ធ្វើដូចនេះដោយប្រើសំណុំតួរអក្សរអវិជ្ជមាន។",

  "examples.range.title": "អនុវត្តន៍៖​ ចន្លោះតួរអក្សរ",
  "examples.range.description": "សរសេរកន្សោមដែលនឹងជ្រើសរើសអក្សរពី `g` ទៅ `k` នៅក្នុងអត្ថបទ។\\n`g` និងអក្សរ `k` គួរតែបញ្ចូលក្នុងជួរនេះផងដែរ",

  "examples.rangeNumber.title": "អនុវត្តន៍៖​ ចន្លោះលេខ",
  "examples.rangeNumber.description": "វាយកន្សោមដើម្បីជ្រើសរើសលេខពី `2` ដល់ `7` ក្នុងអត្ថបទ។\\n`2` និង `7` គួរតែបញ្ចូលក្នុងជួរនេះផងដែរ",

  "steps.repetitions.title": "ពាក្យដដែលៗ",
  "steps.repetitions.description": "តួរអក្សរពិសេសមួយចំនួនត្រូវបានប្រើដើម្បីបញ្ជាក់ចំនួនដងដែលតួរអក្សរនឹងត្រូវបានធ្វើម្តងទៀតនៅក្នុងអត្ថបទ។ តួរអក្សរពិសេសទាំងនេះគឺ បូក `+` សញ្ញាផ្កាយ `*` និងសញ្ញាសួរ `?`",

  "steps.asterisk.title": "សញ្ញាផ្កាយ `*`",
  "steps.asterisk.description": "យើងដាក់សញ្ញាផ្កាយ `*` បន្ទាប់ពីតួរអក្សរ ដើម្បីបង្ហាញថាតួរអក្សរអាចមិនត្រូវគ្នាទាំងស្រុង ឬអាចផ្គូផ្គងច្រើនដង។ ឧទាហរណ៍ បង្ហាញថាអក្សរ `e` មិនគួរកើតឡើងក្នុងអត្ថបទទេ ឬវាអាចកើតឡើងម្តង ឬច្រើនដង",

  "steps.plusCharacter.title": "សញ្ញាបូក `+`",
  "steps.plusCharacter.description": "ដើម្បីបង្ហាញថាតួរអក្សរអាចកើតឡើងមួយ ឬច្រើនដង យើងដាក់សញ្ញាបូក `+` បន្ទាប់ពីតួរអក្សរមួយ។ ឧទាហរណ៍ បង្ហាញថាអក្សរ `e` អាចកើតឡើងមួយ ឬច្រើនដងក្នុងអត្ថបទ",

  "steps.questionMark.title": "សញ្ញា​សួរ `?`",
  "steps.questionMark.description": "ដើម្បីបង្ហាញថាតួរអក្សរគឺស្រេចចិត្តអាចមានឬមិនមាន យើងដាក់សញ្ញាសួរ `?` បន្ទាប់ពីតួរអក្សរមួយ។ ជាឧទាហរណ៍ បង្ហាញថាអក្សរខាងក្រោម 'u' គឺស្រេចចិត្ត។",

  "steps.quantifier.title": "សញ្ញា​របាំង - 1",
  "steps.quantifier.description": "ដើម្បីបង្ហាញចំនួនជាក់លាក់នៃការកើតឡើងនៃតួរអក្សរមួយ យើងសរសេសញ្ញា​របាំង `{n}` រួមជាមួយនឹងចំនួនដងដែលយើងចង់ឱ្យវាកើតឡើងនៅចុងបញ្ចប់។ ជាឧទាហរណ៍ បង្ហាញថាអក្សរខាងក្រោម `e` អាចកើតឡើងតែ `2` ដងប៉ុណ្ណោះ។",

  "steps.quantifierMin.title": "សញ្ញា​របាំង - 2",
  "steps.quantifierMin.description": "ដើម្បីបង្ហាញយ៉ាងហោចណាស់ចំនួនជាក់លាក់នៃការកើតឡើងនៃតួរអក្សរមួយ យើងសរសេរចុងបញ្ចប់នៃតួរអក្សរយ៉ាងហោចណាស់ប៉ុន្មានដងដែលយើងចង់ឱ្យវាកើតឡើង ដោយប្រើសញ្ញាក្បៀស `,` នៅចុងបញ្ចប់ និងនៅខាងក្នុងសញ្ញា​របាំង `{n, }`។ ឧទាហរណ៍ បង្ហាញថាអក្សរ `e` ខាងក្រោមអាចកើតឡើងយ៉ាងហោចណាស់ `3` ដង។",

  "steps.quantifierRange.title": "សញ្ញា​របាំង - 3",
  "steps.quantifierRange.description": "ដើម្បីបង្ហាញពីការកើតឡើងនៃតួរអក្សរនៅក្នុងជួរលេខជាក់លាក់មួយ យើងសរសេរសញ្ញា​របាំង `{x,y}` ជាមួយនឹងចន្លោះពេលដែលយើងចង់ទៅចុងបញ្ចប់។ ឧទាហរណ៍ បង្ហាញថាអក្សរខាងក្រោម `e` អាចកើតឡើងរវាង `1` និង `3` ប៉ុណ្ណោះ។",

  "examples.asterisk.title": "អនុវត្តន៍៖​ សញ្ញាផ្កាយ `*`",
  "examples.asterisk.description": "ប្រើសញ្ញាផ្កាយ `*` ដើម្បីសរសេរកន្សោមដែលនឹងជ្រើសរើសពាក្យនីមួយៗ ដែលសមរម្យសម្រាប់អវត្ដមាននៃអក្សរ `e` នៅក្នុងអត្ថបទ និងវត្តមានរបស់មួយ ឬច្រើន។",

  "examples.plusCharacter.title": "អនុវត្តន៍៖​ សញ្ញាបូក `+`",
  "examples.plusCharacter.description": "សរសេរកន្សោមដោយប្រើសញ្ញាបូក `+` ដើម្បីជ្រើសរើសពាក្យដែលអក្សរ `e` កើតឡើងមួយដង ឬច្រើនដងក្នុងអត្ថបទ។",

  "examples.questionMark.title": "អនុវត្តន៍៖: សញ្ញា​សួរ `?`",
  "examples.questionMark.description": "សរសេរកន្សោមដែលបង្ហាញថាអក្សរ `n` ជាជម្រើសក្នុងអត្ថបទ ដោយប្រើសញ្ញាសួរ `?` ដូច្នេះ ទាំងពាក្យ `a` និង `an` អាចត្រូវបានជ្រើសរើស។",

  "examples.quantifier.title": "អនុវត្តន៍៖​ សញ្ញារបាំង - 1",
  "examples.quantifier.description": "សរសេរកន្សោមដោយប្រើសញ្ញារបាំង `{}` ដែលនឹងរកឃើញអត្ថបទដែលមានលេខ `4` នៅសងខាង។",

  "examples.quantifierMin.title": "អនុវត្តន៍៖​ សញ្ញារបាំង - 2",
  "examples.quantifierMin.description": "សរសេរកន្សោមដោយប្រើសញ្ញារបាំង `{}` ដែលនឹងរកឃើញអត្ថបទដែលមានយ៉ាងហោចណាស់ `2` លេខនៅសងខាង។",

  "examples.quantifierRange.title": "អនុវត្តន៍៖​ សញ្ញារបាំង - 3",
  "examples.quantifierRange.description": "សរសេរកន្សោមដោយប្រើសញ្ញារបាំង `{}` ដែលនឹងរកឃើញអត្ថបទដែលមានយ៉ាងហោចណាស់ `1` និងលេខ `4` ច្រើនបំផុតនៅសងខាង។",

  "steps.groupping.title": "សញ្ញាវង់ក្រចក `( )`: ការដាក់ជាក្រុម",
  "steps.groupping.description": "យើងអាចដាក់កន្សោមមួយក្រុម ហើយប្រើក្រុមទាំងនេះដើម្បីយោង ឬអនុវត្តច្បាប់មួយចំនួន។ ដើម្បីដាក់កន្សោមមួយក្រុម យើងភ្ជាប់ `()` ក្នុងវង់ក្រចក។ សម្រាប់ពេលនេះគ្រាន់តែក្រុម `haa` ខាងក្រោម។",

  "steps.groupReference.title": "កំណត់ការយោងក្រុម",
  "steps.groupReference.description": "ពាក្យ `ha` និង `haa` ត្រូវបានដាក់ជាក្រុមខាងក្រោម។ ក្រុមទីមួយត្រូវបានប្រើដោយការសរសេរ `\\ 1` ដើម្បីជៀសវាងការសរសេរឡើងវិញ។ នៅទីនេះ `1` បង្ហាញពីលំដាប់នៃក្រុម។ វាយ `\\2` នៅចុងបញ្ចប់នៃកន្សោម ដើម្បីយោងទៅក្រុមទីពីរ។",

  "steps.nonCapturingGroupping.title": "សញ្ញាវង់ក្រចក `(?: )`: ការមិនចាប់យកដាក់ជាក្រុម",
  "steps.nonCapturingGroupping.description": "អ្នក​អាច​ដាក់​កន្សោម​មួយ​ជា​ក្រុម ហើយ​ធានា​ថា​វា​មិន​ត្រូវ​បាន​ចាប់​យក​ដោយ​ឯកសារ​យោង។ ឧទាហរណ៍ខាងក្រោមានពីរក្រុម ទោះយ៉ាងណាក៏ដោយ ឯកសារយោងក្រុមទីមួយដែលយើងបង្ហាញដោយ `\\ 1` ពិតជាបង្ហាញពីក្រុមទីពីរ ដោយសារក្រុមទីមួយគឺជាក្រុមដែលមិនចាប់យក។",

  "steps.pipeCharacter.title": "តួរអក្សរបញ្ឈរ `|`",
  "steps.pipeCharacter.description": "វាអនុញ្ញាតឱ្យបញ្ជាក់ថាកន្សោមមួយអាចស្ថិតនៅក្នុងកន្សោមផ្សេងៗគ្នា។ ដូច្នេះ សេចក្តីថ្លែងការណ៍ដែលអាចធ្វើបានទាំងអស់ត្រូវបានសរសេរបំបែកដោយសញ្ញាបញ្ឈរ `|` ។ វាខុសពីសំណុំតួរអក្សរ `[abc]` សំណុំតួរអក្សរដំណើរការនៅកម្រិតតួរអក្សរ។ ជម្មើសជំនួសគឺនៅកម្រិតកន្សោម។ ឧទាហរណ៍ កន្សោមខាងក្រោមនឹងជ្រើសរើសទាំង 'cat' និង 'Cat' ។ បន្ថែមសញ្ញាបំពង់មួយទៀត `|` ទៅចុងបញ្ចប់នៃកន្សោម ហើយវាយ `rat` ដូច្នេះពាក្យទាំងអស់ត្រូវបានជ្រើសរើស។",

  "steps.escapeCharacter.title": "តួរអក្សរទ្រេត `\\`",
  "steps.escapeCharacter.description": "មានតួរអក្សរពិសេសដែលយើងប្រើនៅពេលសរសេរ regex `{ } [ ] / \\ + * . $^ | ?` មុនពេលដែលយើងអាចជ្រើសរើសតួរអក្សរទាំងនេះដោយខ្លួនឯង យើងត្រូវប្រើតួរអក្សរទ្រេត `\\` ។ ឧទាហរណ៍ ដើម្បីជ្រើសរើសចំនុច `.` និងសញ្ញាផ្កាយ `*` តួអក្សរក្នុងអត្ថបទ សូមបន្ថែមតួអក្សរគេច `\\` ពីមុខវា។",

  "steps.caret.title": "សញ្ញាសម្គាល់ `^`:\\nជ្រើសរើសអក្សរនៅចាប់ផ្តើមបន្ទាត់",
  "steps.caret.description": "យើងកំពុងប្រើ `[0-9]` ដើម្បីស្វែងរកលេខ ដើម្បីស្វែងរកតែលេខនៅដើមបន្ទាត់ សូមដាក់បុព្វបទនេះដោយសញ្ញា `^`",

  "steps.dollar.title": "សញ្ញាដុល្លារ `$`:\\nជ្រើសរើសអក្សរនៅចុងបញ្ចប់បន្ទាត់",
  "steps.dollar.description": "ចូរប្រើសញ្ញា `$` បន្ទាប់ពីតម្លៃ `html` ដើម្បីស្វែងរកអត្ថបទ `html` តែនៅខាងចុងបន្ទាត់",

  "steps.wordCharacter.title": "តួរអក្សរពាក្យ `\\w`: អក្សរ លេខ និងអក្សរគូស",
  "steps.wordCharacter.description": "កន្សោម `\\w` ត្រូវបានប្រើដើម្បីស្វែងរកអក្សរ លេខ និងតួអក្សរគូស។ ចូរប្រើកន្សោម `\\w` ដើម្បីស្វែងរកតួអក្សរពាក្យក្នុងអត្ថបទ។",

  "steps.withoutWordCharacter.title": "ផ្ទុយពីតួរអក្សរពាក្យ `\\W`",
  "steps.withoutWordCharacter.description": "កន្សោម `\\ W` ត្រូវបានប្រើដើម្បីស្វែងរកតួអក្សរក្រៅពីអក្សរ លេខ និងសញ្ញាគូសក្រោម។",

  "steps.numberCharacter.title": "តួរអក្សរលេខ`\\d`",
  "steps.numberCharacter.description": "`\\d` ត្រូវ​បាន​ប្រើ​ដើម្បី​រក​តែ​តួ​លេខ",

  "steps.withoutNumberCharacter.title": "ផ្ទុយពីតួរអក្សរលេខ`\\D`",
  "steps.withoutNumberCharacter.description": "`\\D` ត្រូវបានប្រើដើម្បីស្វែងរកតួរអក្សរដែលមិនមែនជាលេខ។",

  "steps.spaceCharacter.title": "តួរអក្សរដកឃ្លា `\\s`",
  "steps.spaceCharacter.description": "`\\s` ត្រូវ​បាន​ប្រើ​ដើម្បី​ស្វែង​រក​តែ​តួអក្សរ​ដកឃ្លា។",

  "steps.withoutSpaceCharacter.title": "ផ្ទុយពីតួរអក្សរដកឃ្លា `\\S`",
  "steps.withoutSpaceCharacter.description": "`\\S` ត្រូវបានប្រើដើម្បីស្វែងរកតួអក្សរមិនដកឃ្លា។",

  "steps.lookarounds.title": "ការមើលជុំវិញ",
  "steps.lookarounds.description": "ប្រសិនបើយើងចង់ឱ្យឃ្លាដែលយើងកំពុងសរសេរមកមុន ឬក្រោយឃ្លាផ្សេងទៀត យើងត្រូវ \"lookaround\" ។ ជំហានបន្ទាប់ដើម្បីស្វែងយល់ពីរបៀប \"lookaround\"​ ",

  "steps.positiveLookahead.title": "ទិដ្ឋភាពវិជ្ជមាន៖ `(?=)`",
  "steps.positiveLookahead.description": "ឧទាហរណ៍ យើងចង់ជ្រើសរើសតម្លៃម៉ោងក្នុងអត្ថបទ។ ដូច្នេះ ដើម្បីជ្រើសរើសតែតម្លៃលេខដែលមាន `PM` បន្ទាប់ពីពួកវា យើងត្រូវសរសេរកន្សោមមើលទៅមុខវិជ្ជមាន `(?=)` បន្ទាប់ពីកន្សោមរបស់យើង។ រួមបញ្ចូល `PM` បន្ទាប់ពីសញ្ញា `=` នៅខាងក្នុងវង់ក្រចក",

  "steps.negativeLookahead.title": "ទិដ្ឋភាពអវិជ្ជមាន៖ `(?!)`",
  "steps.negativeLookahead.description": "ឧទាហរណ៍ យើងចង់ជ្រើសរើសលេខក្រៅពីតម្លៃម៉ោងក្នុងអត្ថបទ។ ដូច្នេះហើយ យើងត្រូវសរសេរកន្សោមមើលអវិជ្ជមាន `(?!)` បន្ទាប់ពីកន្សោមរបស់យើង ដើម្បីជ្រើសរើសតែតម្លៃលេខដែលមិនមាន `PM` បន្ទាប់ពីពួកវា។ រួមបញ្ចូល `PM` បន្ទាប់ពីសញ្ញា `!` នៅខាងក្នុងវង់ក្រចក",
  
  "steps.positiveLookbehind.title": "ទិដ្ឋភាពវិជ្ជមាន៖ `(?<=)`",
  "steps.positiveLookbehind.description": "ឧទាហរណ៍ យើងចង់ជ្រើសរើសតម្លៃក្នុងអត្ថបទ។ ដូច្នេះ ដើម្បីជ្រើសរើសតែតម្លៃលេខដែលនាំមុខដោយ `$` យើងត្រូវសរសេរពាក្យវិជ្ជមានមើលក្រោយកន្សោម `(?<=)` មុនកន្សោមរបស់យើង។ បន្ថែម `\\$` បន្ទាប់ពីសញ្ញា `=` នៅខាងក្នុងតង្កៀប",

  "steps.negativeLookbehind.title": "មើលទៅក្រោយអវិជ្ជមាន៖ `(?&lt;!)`",
  "steps.negativeLookbehind.description": "ឧទាហរណ៍ យើងចង់ជ្រើសរើសលេខក្នុងអត្ថបទក្រៅពីតម្លៃតម្លៃ។ ដូច្នេះ ដើម្បី​ជ្រើសរើស​តែ​តម្លៃ​លេខ​ដែល​មិន​នៅ​ពី​មុខ `$` យើង​ត្រូវ​សរសេរ​អវិជ្ជមាន​មើល​ក្រោយ `(?&lt;!)` មុន​កន្សោម​របស់​យើង។ បន្ថែម `\\$` បន្ទាប់ពី `!` នៅខាងក្នុងតង្កៀប",

  "steps.flags.title": "ទង់ជាតិ",
  "steps.flags.description": "ទង់ផ្លាស់ប្តូរលទ្ធផលនៃកន្សោម។ នោះហើយជាមូលហេតុដែលទង់ត្រូវបានគេហៅថា `modifiers` ផងដែរ។ ទង់កំណត់ថាតើកន្សោមដែលបានវាយចាត់ទុកអត្ថបទជាបន្ទាត់ដាច់ដោយឡែក ប្រកាន់អក្សរតូចធំ ឬស្វែងរកការផ្គូផ្គងទាំងអស់។ បន្តទៅជំហានបន្ទាប់ដើម្បីរៀនទង់",

  "steps.flagsGlobal.title": "ទង់សកល",
  "steps.flagsGlobal.description": "ទង់ `gloabl` បណ្តាលឱ្យកន្សោមជ្រើសរើសការផ្គូផ្គងទាំងអស់។ បើ​មិន​បាន​ប្រើ វា​នឹង​ជ្រើស​រើស​តែ​ការ​ប្រកួត​ដំបូង​ប៉ុណ្ណោះ។ ឥឡូវនេះបើកទង់ 'សកល' ដើម្បីអាចជ្រើសរើសការប្រកួតទាំងអស់",

  "steps.flagsMultiline.title": "ទង់ពហុជួរ",
  "steps.flagsMultiline.description": "Regex មើលឃើញអត្ថបទទាំងអស់ជាបន្ទាត់មួយ។ ប៉ុន្តែយើងប្រើទង់ `multiline` ដើម្បីគ្រប់គ្រងបន្ទាត់នីមួយៗដោយឡែកពីគ្នា។ តាមវិធីនេះ កន្សោមដែលយើងសរសេរតាមចុងបញ្ចប់នៃបន្ទាត់ការងារដាច់ដោយឡែកសម្រាប់បន្ទាត់នីមួយៗ។ ឥឡូវនេះបើកទង់ `multiline` ដើម្បីស្វែងរកការប្រកួតទាំងអស់។",

  "steps.flagsCaseInsensitive.title": "ទង់ដែលមិនប្រកាន់អក្សរតូចធំ",
  "steps.flagsCaseInsensitive.description": "ដើម្បីលុបការយល់ឃើញអក្សរតូចធំនៃកន្សោមដែលយើងបានសរសេរ យើងត្រូវធ្វើឱ្យទង់ `case-insensitive`",
  
  "steps.greedyMatching.title": "ការផ្គូផ្គង Greedy",
  "steps.greedyMatching.description": "Regex ធ្វើការផ្គូផ្គងលោភលន់តាមលំនាំដើម។ នេះមានន័យថាការផ្គូផ្គងនឹងមានរយៈពេលតាមដែលអាចធ្វើទៅបាន។ សូមពិនិត្យមើលឧទាហរណ៍ខាងក្រោម។ វាសំដៅទៅលើការប្រកួតណាមួយដែលបញ្ចប់ដោយ `r` ហើយអាចជាតួអក្សរណាមួយដែលនាំមុខដោយវា។ ប៉ុន្តែវាមិនឈប់នៅអក្សរទីមួយ `r` ទេ",

  "steps.lazyMatching.title": "ការផ្គូផ្គង Lazy",
  "steps.lazyMatching.description": "ការផ្គូផ្គងខ្ជិល(Lazy) មិនដូចការផ្គូផ្គងលោភលន់ទេ ឈប់នៅការផ្គូផ្គងដំបូង។ ឧទាហរណ៍ ក្នុងឧទាហរណ៍ខាងក្រោម បន្ថែម `?` បន្ទាប់ពី `*` ដើម្បីស្វែងរកការផ្គូផ្គងដំបូងដែលបញ្ចប់ដោយអក្សរ `r` ហើយត្រូវនាំមុខដោយតួអក្សរណាមួយ។ វាមានន័យថាការប្រកួតនេះនឹងឈប់នៅអក្សរទីមួយ `r`",

  "steps.completeAllSteps.title": "សូមអបអរសាទរអ្នកបានបញ្ចប់គ្រប់ជំហានទាំងអស់!",
  "steps.completeAllSteps.description": "អ្នកអាចត្រឡប់ទៅជំហានមុននៅពេលណាដែលអ្នកចង់ ហើយអ្នកអាចរុករកបានយ៉ាងងាយស្រួលតាមរយៈជំហានទាំងអស់ដែលអ្នកបានឆ្លងកាត់"
}
