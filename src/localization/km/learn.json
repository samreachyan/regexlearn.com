{
  "examples.starter.title": "អនុវត្តន៍",
  "examples.starter.description": "ឥឡូវនេះដល់ពេលហើយដើម្បីធ្វើការអនុវត្តមេរៀនមួយចំនួន ដើម្បរំលឹកនូវអ្វីដែលយើងបានរៀន",

  "examples.finish.title": "ការអនុវត្តន៍បានជោគជ័យ",
  "examples.finish.description": " ",

  "steps.starter.title": "Intro",
  "steps.starter.description": "Regex គឺកន្សោមធម្មតាខ្លីៗ វាជួយក្នុងការផ្គូផ្គង ស្វែងរក ឬគ្រប់គ្រងអត្ថបទ។ ចាប់ផ្តើមដោយការវាយបញ្ចូល `OK` នៅក្នុងប្រអប់ ដើម្បីបន្តទៅជំហានដំបូង និងចូលទៅកាន់ការពិពណ៌នាលម្អិតបន្ថែមទៀត។",

  "steps.whatIsRegex.title": "អ្វីទៅជាអន្តរកម្មនៃ `Regex`?",
  "steps.whatIsRegex.description": "Regex គឺកន្សោមធម្មតាខ្លី ហើយជាតួអក្សរដែលបង្ហាញពីគំរូស្វែងរក។ វាត្រូវបានហៅជា 'Regex' ឬ 'Regexp` ។ វាជួយក្នុងការផ្គូផ្គង ស្វែងរក ឬគ្រប់គ្រងអត្ថបទ។ ចាប់ផ្តើមដោយការវាយបញ្ចូល `យល់ព្រម` នៅក្នុងវាល Regex ដើម្បីបន្តទៅជំហានដំបូង និងចូលទៅកាន់ការពិពណ៌នាលម្អិតបន្ថែមទៀត។ Regex ត្រូវបានគេប្រើដើម្បីស្វែងរក ឬជំនួសពាក្យនៅក្នុងអត្ថបទ។ It is especially used to find or replace words in texts. In addition, we can test whether a text complies with the rules we set.\\n\\n For example, let's say you have a list of filenames. And you only want to find files with the `pdf` extension. Following typing an expression `^\\w+\\.pdf$` will work. The meaning of the definitions in this expression will become clearer as the steps progress.",

  "steps.basicMatchers.title": "មូលដ្ឋាននៃ Matchers",
  "steps.basicMatchers.description": "តួអក្សរ ឬពាក្យដែលយើងចង់ស្វែងរកគឺអាចសរសេរដោយផ្ទាល់។ វាស្រដៀងនឹងដំណើរការស្វែងរកធម្មតា។ ឧទាហរណ៍ដើម្បីស្វែងរកពាក្យ `curious` ក្នុងអត្ថបទ អ្នកគ្រាន់តែសរសេរដូចគ្នា",

  "steps.dotCharacter.title": "សញ្ញាចុចមួយ `.` មានន័យថា រកតួអក្សរណាមួយ",
  "steps.dotCharacter.description": "សញ្ញាចុចមួយ `.` អនុញ្ញាតឱ្យជ្រើសរើសតួអក្សរណាមួយ​ រួមទាំងតួអក្សរពិសេស និងចន្លោះ",

  "steps.characterSet.title": "សំណុំតួអក្សរ `[abc]`",
  "steps.characterSet.description": "ប្រសិនបើតួអក្សរមួយក្នុងពាក្យមួយអាចជាតួអក្សរផ្សេងៗ​ យើងសរសេរវានៅក្នុងសញ្ញាខ្នៀប `[]` ជាមួយតួអក្សរណាមួយដែលអ្នកចង់រក។ ឧទាហរណ៍ ដើម្បីស្វែងរកកន្សោមពាក្យមួយក្នុងអត្ថបទ សូមវាយតួអក្សរ `a`, `e`, `i`, `o`, `u` នៅក្នុងសញ្ញាខ្នៀប `[]`",

  "steps.negatedCharacterSet.title": "សំណុំតួអក្សរផ្ទុយ `[^abc]`",
  "steps.negatedCharacterSet.description": "ដើម្បីស្វែងរកពាក្យទាំងអស់នៅក្នុងអត្ថបទខាងក្រោម លើកលែងតែ `ber` និង `bor` ដោយគ្រាន់តែវាយ `e` និង `o` បន្តបន្ទាប់គ្នាពីសញ្ញា `^` នៅក្នុងសញ្ញាខ្នៀប `[]`.",

  "steps.range.title": "ចន្លោះតួរអក្សរ `[a-z]`",
  "steps.range.description": "ដើម្បីស្វែងរកអក្សរនៅក្នុងអត្ថបទដែលបានបញ្ជាក់ អក្សរចាប់ផ្តើម និងអក្សរបញ្ចប់ត្រូវបានសរសេរក្នុងខ្នៀប `[]` ជាមួយនឹងសញ្ញាចន្លោះពី​ ពាក្យមួយទៅពាក្យមួយ​ `-` វាគឺងាយស្រួល។ វាយកន្សោមពាក្យដែលនឹងជ្រើសរើសអក្សរតូចទាំងអស់ដែលចាប់ពី `e` ដល់ `o` ",

  "steps.rangeNumber.title": "ចន្លោះលេខ `[0-9]`",
  "steps.rangeNumber.description": "ដើម្បីស្វែងរកលេខនៅក្នុងជួរដែលបានបញ្ជាក់ លេខចាប់ផ្តើម និងលេខបញ្ចប់ត្រូវបានសរសេរក្នុងខ្នៀប `[]` ជាមួយសញ្ញាដក `-` នៃចន្លោះលេខ។ សរសេរកន្សោមដែលនឹងជ្រើសរើសលេខចន្លោះលេខ `3` ដល់ `6`",

  "examples.basicMatchers.title": "អនុវត្តន៍៖ មូលដ្ឋាននៃ Matcher",
  "examples.basicMatchers.description": "សរសេរកន្សោមដែលនឹងជ្រើសរើសពាក្យ `of` ក្នុងអត្ថបទ",

  "examples.dotCharacter.title": "អនុវត្តន៍៖ តួអក្សរណាមួយ",
  "examples.dotCharacter.description": "វាយបញ្ចូលកន្សោមដើម្បីជ្រើសរើសអក្សរនីមួយៗ លេខ ដកឃ្លា និងតួអក្សរពិសេសនៅក្នុងអត្ថបទ។ កន្សោមដែលអ្នកវាយត្រូវតែផ្គូផ្គងតួអក្សរណាមួយ។",

  "examples.characterSet.title": "អនុវត្តន៍៖​ សំណុំតួអក្សរ",
  "examples.characterSet.description": "សរសេរឃ្លាដែលត្រូវនឹងពាក្យនីមួយៗក្នុងអត្ថបទ។ តួអក្សរតែមួយគត់ដែលផ្លាស់ប្តូរគឺជាអក្សរកាត់នៃពាក្យ។",

  "examples.negatedCharacterSet.title": "អនុវត្តន៍៖​ សំណុំតួអក្សរផ្ទុយ",
  "examples.negatedCharacterSet.description": "សរសេរកន្សោមដែលនឹងផ្គូផ្គងអ្វីផ្សេងក្រៅពីពាក្យ 'beor' និង 'beur' នៅក្នុងអត្ថបទ។ ធ្វើដូចនេះដោយប្រើសំណុំតួអក្សរអវិជ្ជមាន។",

  "examples.range.title": "អនុវត្តន៍៖​ ចន្លោះតួរអក្សរ",
  "examples.range.description": "សរសេរកន្សោមដែលនឹងជ្រើសរើសអក្សរពី `g` ទៅ `k` នៅក្នុងអត្ថបទ។\\n`g` និងអក្សរ `k` គួរតែបញ្ចូលក្នុងជួរនេះផងដែរ",

  "examples.rangeNumber.title": "អនុវត្តន៍៖​ ចន្លោះលេខ",
  "examples.rangeNumber.description": "វាយកន្សោមដើម្បីជ្រើសរើសលេខពី `2` ដល់ `7` ក្នុងអត្ថបទ។\\n`2` និង `7` គួរតែបញ្ចូលក្នុងជួរនេះផងដែរ",

  "steps.repetitions.title": "ពាក្យដដែលៗ",
  "steps.repetitions.description": "តួអក្សរពិសេសមួយចំនួនត្រូវបានប្រើដើម្បីបញ្ជាក់ចំនួនដងដែលតួអក្សរនឹងត្រូវបានធ្វើម្តងទៀតនៅក្នុងអត្ថបទ។ តួអក្សរពិសេសទាំងនេះគឺ បូក `+` សញ្ញាផ្កាយ `*` និងសញ្ញាសួរ `?`",

  "steps.asterisk.title": "សញ្ញាផ្កាយ `*`",
  "steps.asterisk.description": "យើងដាក់សញ្ញាផ្កាយ `*` បន្ទាប់ពីតួអក្សរ ដើម្បីបង្ហាញថាតួអក្សរអាចមិនត្រូវគ្នាទាំងស្រុង ឬអាចផ្គូផ្គងច្រើនដង។ ឧទាហរណ៍ បង្ហាញថាអក្សរ `e` មិនគួរកើតឡើងក្នុងអត្ថបទទេ ឬវាអាចកើតឡើងម្តង ឬច្រើនដង",

  "steps.plusCharacter.title": "សញ្ញាបូក `+`",
  "steps.plusCharacter.description": "ដើម្បីបង្ហាញថាតួអក្សរអាចកើតឡើងមួយ ឬច្រើនដង យើងដាក់សញ្ញាបូក `+` បន្ទាប់ពីតួអក្សរមួយ។ ឧទាហរណ៍ បង្ហាញថាអក្សរ `e` អាចកើតឡើងមួយ ឬច្រើនដងក្នុងអត្ថបទ",

  "steps.questionMark.title": "សញ្ញា​សួរ `?`",
  "steps.questionMark.description": "ដើម្បីបង្ហាញថាតួអក្សរគឺស្រេចចិត្តអាចមានឬមិនមាន យើងដាក់សញ្ញាសួរ `?` បន្ទាប់ពីតួអក្សរមួយ។ ជាឧទាហរណ៍ បង្ហាញថាអក្សរខាងក្រោម 'u' គឺស្រេចចិត្ត។",

  "steps.quantifier.title": "សញ្ញា​របាំង - 1",
  "steps.quantifier.description": "ដើម្បីបង្ហាញចំនួនជាក់លាក់នៃការកើតឡើងនៃតួអក្សរមួយ យើងសរសេសញ្ញា​របាំង `{n}` រួមជាមួយនឹងចំនួនដងដែលយើងចង់ឱ្យវាកើតឡើងនៅចុងបញ្ចប់។ ជាឧទាហរណ៍ បង្ហាញថាអក្សរខាងក្រោម `e` អាចកើតឡើងតែ `2` ដងប៉ុណ្ណោះ។",

  "steps.quantifierMin.title": "សញ្ញា​របាំង - 2",
  "steps.quantifierMin.description": "ដើម្បីបង្ហាញយ៉ាងហោចណាស់ចំនួនជាក់លាក់នៃការកើតឡើងនៃតួអក្សរមួយ យើងសរសេរចុងបញ្ចប់នៃតួអក្សរយ៉ាងហោចណាស់ប៉ុន្មានដងដែលយើងចង់ឱ្យវាកើតឡើង ដោយប្រើសញ្ញាក្បៀស `,` នៅចុងបញ្ចប់ និងនៅខាងក្នុងសញ្ញា​របាំង `{n, }`។ ឧទាហរណ៍ បង្ហាញថាអក្សរ `e` ខាងក្រោមអាចកើតឡើងយ៉ាងហោចណាស់ `3` ដង។",

  "steps.quantifierRange.title": "សញ្ញា​របាំង - 3",
  "steps.quantifierRange.description": "ដើម្បីបង្ហាញពីការកើតឡើងនៃតួអក្សរនៅក្នុងជួរលេខជាក់លាក់មួយ យើងសរសេរសញ្ញា​របាំង `{x,y}` ជាមួយនឹងចន្លោះពេលដែលយើងចង់ទៅចុងបញ្ចប់។ ឧទាហរណ៍ បង្ហាញថាអក្សរខាងក្រោម `e` អាចកើតឡើងរវាង `1` និង `3` ប៉ុណ្ណោះ។",

  "examples.asterisk.title": "អនុវត្តន៍៖​ សញ្ញាផ្កាយ `*`",
  "examples.asterisk.description": "ប្រើសញ្ញាផ្កាយ `*` ដើម្បីសរសេរកន្សោមដែលនឹងជ្រើសរើសពាក្យនីមួយៗ ដែលសមរម្យសម្រាប់អវត្ដមាននៃអក្សរ `e` នៅក្នុងអត្ថបទ និងវត្តមានរបស់មួយ ឬច្រើន។",

  "examples.plusCharacter.title": "អនុវត្តន៍៖​ សញ្ញាបូក `+`",
  "examples.plusCharacter.description": "សរសេរកន្សោមដោយប្រើសញ្ញាបូក `+` ដើម្បីជ្រើសរើសពាក្យដែលអក្សរ `e` កើតឡើងមួយដង ឬច្រើនដងក្នុងអត្ថបទ។",

  "examples.questionMark.title": "អនុវត្តន៍៖: សញ្ញា​សួរ `?`",
  "examples.questionMark.description": "សរសេរកន្សោមដែលបង្ហាញថាអក្សរ `n` ជាជម្រើសក្នុងអត្ថបទ ដោយប្រើសញ្ញាសួរ `?` ដូច្នេះ ទាំងពាក្យ `a` និង `an` អាចត្រូវបានជ្រើសរើស។",

  "examples.quantifier.title": "អនុវត្តន៍៖​ សញ្ញារបាំង - 1",
  "examples.quantifier.description": "សរសេរកន្សោមដោយប្រើសញ្ញារបាំង `{}` ដែលនឹងរកឃើញអត្ថបទដែលមានលេខ `4` នៅសងខាង។",

  "examples.quantifierMin.title": "អនុវត្តន៍៖​ សញ្ញារបាំង - 2",
  "examples.quantifierMin.description": "សរសេរកន្សោមដោយប្រើសញ្ញារបាំង `{}` ដែលនឹងរកឃើញអត្ថបទដែលមានយ៉ាងហោចណាស់ `2` លេខនៅសងខាង។",

  "examples.quantifierRange.title": "អនុវត្តន៍៖​ សញ្ញារបាំង - 3",
  "examples.quantifierRange.description": "សរសេរកន្សោមដោយប្រើសញ្ញារបាំង `{}` ដែលនឹងរកឃើញអត្ថបទដែលមានយ៉ាងហោចណាស់ `1` និងលេខ `4` ច្រើនបំផុតនៅសងខាង។",

  "steps.groupping.title": "សញ្ញាវង់ក្រចក `( )`: ការដាក់ជាក្រុម",
  "steps.groupping.description": "យើងអាចដាក់កន្សោមមួយក្រុម ហើយប្រើក្រុមទាំងនេះដើម្បីយោង ឬអនុវត្តច្បាប់មួយចំនួន។ ដើម្បីដាក់កន្សោមមួយក្រុម យើងភ្ជាប់ `()` ក្នុងវង់ក្រចក។ សម្រាប់ពេលនេះគ្រាន់តែក្រុម `haa` ខាងក្រោម។",

  "steps.groupReference.title": "កំណត់ការយោងក្រុម",
  "steps.groupReference.description": "ពាក្យ `ha` និង `haa` ត្រូវបានដាក់ជាក្រុមខាងក្រោម។ ក្រុមទីមួយត្រូវបានប្រើដោយការសរសេរ `\\ 1` ដើម្បីជៀសវាងការសរសេរឡើងវិញ។ នៅទីនេះ `1` បង្ហាញពីលំដាប់នៃក្រុម។ វាយ `\\2` នៅចុងបញ្ចប់នៃកន្សោម ដើម្បីយោងទៅក្រុមទីពីរ។",

  "steps.nonCapturingGroupping.title": "សញ្ញាវង់ក្រចក `(?: )`: ការមិនចាប់យកដាក់ជាក្រុម",
  "steps.nonCapturingGroupping.description": "អ្នក​អាច​ដាក់​កន្សោម​មួយ​ជា​ក្រុម ហើយ​ធានា​ថា​វា​មិន​ត្រូវ​បាន​ចាប់​យក​ដោយ​ឯកសារ​យោង។ ឧទាហរណ៍ខាងក្រោមានពីរក្រុម ទោះយ៉ាងណាក៏ដោយ ឯកសារយោងក្រុមទីមួយដែលយើងបង្ហាញដោយ `\\ 1` ពិតជាបង្ហាញពីក្រុមទីពីរ ដោយសារក្រុមទីមួយគឺជាក្រុមដែលមិនចាប់យក។",

  "steps.pipeCharacter.title": "តួអក្សរបញ្ឈរ `|`",
  "steps.pipeCharacter.description": "វាអនុញ្ញាតឱ្យបញ្ជាក់ថាកន្សោមមួយអាចស្ថិតនៅក្នុងកន្សោមផ្សេងៗគ្នា។ ដូច្នេះ សេចក្តីថ្លែងការណ៍ដែលអាចធ្វើបានទាំងអស់ត្រូវបានសរសេរបំបែកដោយសញ្ញាបញ្ឈរ `|` ។ វាខុសពីសំណុំតួអក្សរ `[abc]` សំណុំតួអក្សរដំណើរការនៅកម្រិតតួអក្សរ។ ជម្មើសជំនួសគឺនៅកម្រិតកន្សោម។ ឧទាហរណ៍ កន្សោមខាងក្រោមនឹងជ្រើសរើសទាំង 'cat' និង 'Cat' ។ បន្ថែមសញ្ញាបំពង់មួយទៀត `|` ទៅចុងបញ្ចប់នៃកន្សោម ហើយវាយ `rat` ដូច្នេះពាក្យទាំងអស់ត្រូវបានជ្រើសរើស។",

  "steps.escapeCharacter.title": "Escape Character `\\`",
  "steps.escapeCharacter.description": "There are special characters that we use when writing regex. `{ } [ ] / \\ + * . $^ | ?` Before we can select these characters themselves, we need to use an escape character `\\`. For example, to select the dot `.` and asterisk `*` characters in the text, let's add an escape character `\\` before it.",

  "steps.caret.title": "Caret Sign `^`:\\nSelecting by Line Start",
  "steps.caret.description": "We were using `[0-9]` to find numbers. To find only numbers at the beginning of a line, prefix this expression with the `^` sign.",

  "steps.dollar.title": "Dollar Sign `$`:\\nSelecting by End of Line",
  "steps.dollar.description": "Let's use the `$` sign after the `html` value to find the `html` texts only at the end of the line.",

  "steps.wordCharacter.title": "Word Character `\\w`: Letter, Number and Underscore",
  "steps.wordCharacter.description": "The expression `\\w` is used to find letters, numbers and underscore characters. Let's use the expression `\\w` to find word characters in the text.",

  "steps.withoutWordCharacter.title": "Except Word Character `\\W`",
  "steps.withoutWordCharacter.description": "The expression `\\W` is used to find characters other than letters, numbers, and underscores.",

  "steps.numberCharacter.title": "Number Character `\\d`",
  "steps.numberCharacter.description": "`\\d` is used to find only number characters.",

  "steps.withoutNumberCharacter.title": "Except Number Character `\\D`",
  "steps.withoutNumberCharacter.description": "`\\D` is used to find non-numeric characters.",

  "steps.spaceCharacter.title": "Space Character `\\s`",
  "steps.spaceCharacter.description": "`\\s` is used to find only space characters.",

  "steps.withoutSpaceCharacter.title": "Except Space Character `\\S`",
  "steps.withoutSpaceCharacter.description": "`\\S` is used to find non-space characters.",

  "steps.lookarounds.title": "Lookarounds",
  "steps.lookarounds.description": "If we want the phrase we're writing to come before or after another phrase, we need to \"lookaround\". Take the next step to learn how to \"lookaround\".",

  "steps.positiveLookahead.title": "Positive Lookahead: `(?=)`",
  "steps.positiveLookahead.description": "For example, we want to select the hour value in the text. Therefore, to select only the numerical values that have `PM` after them, we need to write the positive look-ahead expression `(?=)` after our expression. Include `PM` after the `=` sign inside the parentheses.",

  "steps.negativeLookahead.title": "Negative Lookahead: `(?!)`",
  "steps.negativeLookahead.description": "For example, we want to select numbers other than the hour value in the text. Therefore, we need to write the negative look-ahead `(?!)` expression after our expression to select only the numerical values that do not have `PM` after them. Include `PM` after the `!` sign inside the parentheses.",
  
  "steps.positiveLookbehind.title": "Positive Lookbehind: `(?<=)`",
  "steps.positiveLookbehind.description": "For example, we want to select the price value in the text. Therefore, to select only the number values that preceded by `$`, we need to write the positive lookbehind expression `(?<=)` before our expression. Add `\\$` after the `=` sign inside the brackets.",

  "steps.negativeLookbehind.title": "Negative Lookbehind: `(?&lt;!)`",
  "steps.negativeLookbehind.description": "For example, we want to select numbers in the text other than the price value. Therefore, to select only numeric values that are not preceded by `$`, we need to write the negative lookbehind `(?&lt;!)` before our expression. Add `\\$` after the `!` inside the brackets.",

  "steps.flags.title": "Flags",
  "steps.flags.description": "Flags change the output of the expression. That's why flags are also called `modifiers`. Flags determine whether the typed expression treats text as separate lines, is case sensitive, or finds all matches. Continue to the next step to learn the flags.",

  "steps.flagsGlobal.title": "Global Flag",
  "steps.flagsGlobal.description": "The `global` flag causes the expression to select all matches. If not used it will only select the first match. Now enable the `global` flag to be able to select all matches.",

  "steps.flagsMultiline.title": "Multiline Flag",
  "steps.flagsMultiline.description": "Regex sees all text as one line. But we use the `multiline` flag to handle each line separately. In this way, the expressions we write according to the end of the linework separately for each line. Now enable the `multiline` flag to find all matches.",

  "steps.flagsCaseInsensitive.title": "Case-insensitive Flag",
  "steps.flagsCaseInsensitive.description": "In order to remove the case-sensitivity of the expression we have written, we must activate the `case-insensitive` flag.",
  
  "steps.greedyMatching.title": "Greedy Matching",
  "steps.greedyMatching.description": "Regex does a greedy match by default. This means that the matchmaking will be as long as possible. Check out the example below. It refers to any match that ends in `r` and can be any character preceded by it. But it does not stop at the first letter `r`.",

  "steps.lazyMatching.title": "Lazy Matching",
  "steps.lazyMatching.description": "Lazy matchmaking, unlike greedy matching, stops at the first matching. For example, in the example below, add a `?` after `*` to find the first match that ends with the letter `r` and is preceded by any character. It means that this match will stop at the first letter `r`.",

  "steps.completeAllSteps.title": "Congratulations, you have completed all the steps!",
  "steps.completeAllSteps.description": "You can return to the previous steps whenever you want, and you can easily navigate through all the steps you have passed."
}
